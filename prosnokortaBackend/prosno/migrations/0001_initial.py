# Generated by Django 4.1.2 on 2022-10-20 11:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('no', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_no', models.PositiveSmallIntegerField()),
                ('title', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=50)),
                ('class_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prosno.class')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('age', models.SmallIntegerField()),
                ('phone', models.CharField(max_length=50)),
                ('rating', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(null=True)),
                ('first_option', models.CharField(max_length=255)),
                ('second_option', models.CharField(max_length=255)),
                ('third_option', models.CharField(max_length=255)),
                ('fourth_option', models.CharField(max_length=255)),
                ('answer', models.PositiveSmallIntegerField()),
                ('explanation', models.TextField()),
                ('points', models.PositiveBigIntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('chapter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='prosno.chapter')),
                ('class_no', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='prosno.class')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='prosno.course')),
            ],
            options={
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('total_questions', models.PositiveIntegerField()),
                ('total_marks', models.PositiveIntegerField()),
                ('duration', models.PositiveIntegerField()),
                ('created', models.DateField(auto_now_add=True)),
                ('start_at', models.DateTimeField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('date', models.DateField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prosno.question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='chapter',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prosno.course'),
        ),
        migrations.CreateModel(
            name='QuestionInExam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prosno.question')),
                ('set', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='prosno.set')),
            ],
            options={
                'unique_together': {('question', 'set')},
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corrected', models.PositiveSmallIntegerField(null=True)),
                ('score', models.PositiveBigIntegerField(null=True)),
                ('status', models.CharField(default='requested', max_length=56)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='prosno.set')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('student', 'set')},
            },
        ),
    ]
